{"version":3,"sources":["components/Square.js","components/Board.js","components/Game.js","index.js"],"names":["Square","props","className","winnerClass","onClick","value","Board","row","col","board","cellCounter","i","columns","j","push","this","renderSquare","winnerSquares","squares","createBoard","React","Component","calculateWinner","lines","length","a","b","c","winner","winnerLine","Game","state","history","Array","fill","currentstepNumber","xIsNext","move","slice","setState","concat","location","stepNumber","reverse","step","status","current","draw","checkDraw","moves","map","style","desc","jumpTo","handleClick","sortMoves","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2df2e222.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Square = (props) => {\r\n    return (\r\n      <button className= {props.winnerClass} onClick={props.onClick} >\r\n        {props.value}\r\n      </button>\r\n    );\r\n}\r\n\r\nexport default Square\r\n","import React from 'react';\r\nimport Square from './Square';\r\n\r\nclass Board extends React.Component {\r\n    createBoard(row, col) {\r\n      const board = [];\r\n      let cellCounter = 0;\r\n  \r\n      for (let i = 0; i < row; i += 1) {\r\n        const columns = [];\r\n        for (let j = 0; j < col; j += 1) {\r\n          columns.push(this.renderSquare(cellCounter++));\r\n        }\r\n        board.push(<div key={i} className=\"board-row\">{columns}</div>);\r\n      }\r\n  \r\n      return board;\r\n    }\r\n    renderSquare(i) {\r\n      \r\n      const winnerClass =\r\n      this.props.winnerSquares &&\r\n      (this.props.winnerSquares[0] === i ||\r\n        this.props.winnerSquares[1] === i ||\r\n        this.props.winnerSquares[2] === i)\r\n        ? 'squarewinner' : 'square';\r\n\r\n      return (\r\n        <Square \r\n          winnerClass={winnerClass}\r\n          key={i}\r\n          value={this.props.squares[i]}\r\n          onClick={() => this.props.onClick(i)}\r\n        />\r\n      );\r\n    }\r\n  \r\n    render() {\r\n      return (\r\n        <div>\r\n          {this.createBoard(3,3)}\r\n        </div>\r\n      );\r\n    }\r\n  \r\n  }\r\n  \r\n\r\nexport default Board\r\n","import React from \"react\";\r\nimport Board from \"./Board\";\r\n\r\nconst calculateWinner = (squares) => {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n\r\n  for (let i = 0; i < lines.length; i += 1) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return { winner: squares[a], winnerLine: lines[i] };\r\n    }\r\n  }\r\n\r\n  return { winner: null, winnerLine: null };\r\n};\r\n\r\nconst checkDraw = (squares) =>{\r\n  for (let i = 0; i < squares.length; i++) {\r\n    if(!squares[i]) return false;\r\n  }\r\n  return true;\r\n}\r\n\r\nconst getLocation = (move) => {\r\n  const locationMap = {\r\n    0: '[row: 1, col: 1]',\r\n    1: '[row: 1, col: 2]',\r\n    2: '[row: 1, col: 3]',\r\n    3: '[row: 2, col: 1]',\r\n    4: '[row: 2, col: 2]',\r\n    5: '[row: 2, col: 3]',\r\n    6: '[row: 3, col: 1]',\r\n    7: '[row: 3, col: 2]',\r\n    8: '[row: 3, col: 3]',\r\n  };\r\n\r\n  return locationMap[move];\r\n};\r\n\r\nclass Game extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        history: [\r\n          {\r\n            squares: Array(9).fill(null),\r\n          },\r\n        ],\r\n        currentstepNumber: 0,\r\n        xIsNext: true,\r\n      \r\n      };\r\n    }\r\n  \r\n    handleClick(i) {\r\n      const history = this.state.history.slice(0, this.state.currentstepNumber + 1);\r\n      const current = history[history.length - 1];\r\n      const squares = current.squares.slice();\r\n      if (calculateWinner(squares).winner || squares[i]) {\r\n        return;\r\n      }\r\n      squares[i] = this.state.xIsNext ? \"X\" : \"O\";\r\n      this.setState({\r\n        history: history.concat([\r\n          { squares: squares, \r\n            location: getLocation(i),\r\n            stepNumber: history.length,\r\n         }]),\r\n        currentstepNumber: history.length,\r\n        xIsNext: !this.state.xIsNext,\r\n      });\r\n    }\r\n  \r\n    sortMoves(){\r\n      this.setState({        \r\n        history: this.state.history.reverse(),\r\n        currentstepNumber: this.state.history.length -1 - this.state.currentstepNumber,\r\n      })\r\n    }\r\n  \r\n    jumpTo(step) {\r\n      this.setState({\r\n        currentstepNumber: step,\r\n        xIsNext: step % 2 === 0,     \r\n      });\r\n    }\r\n  \r\n \r\n  \r\n    render() {\r\n      const history = this.state.history;\r\n      const current = history[this.state.currentstepNumber];\r\n      const {winner, winnerLine} = calculateWinner(current.squares);\r\n      const draw = checkDraw(current.squares);\r\n\r\n      const moves = history.map((step, move) => {\r\n        const style = this.state.currentstepNumber === move ? 'button' : '';\r\n        const location = step.location ? step.location : '';\r\n        \r\n        const desc = step.stepNumber\r\n        ? \"Go to move #\" + step.stepNumber + location\r\n        : \"Go to game start\";\r\n        return (\r\n          <li key={move}>\r\n            <button className = {`${style}`} onClick={() => this.jumpTo(move)}>{desc}</button>\r\n          </li>\r\n        );\r\n      });\r\n  \r\n      let status;\r\n      if (winner) {\r\n        status = \"Winner: \" + winner;\r\n      } else if(draw){\r\n        status = \"Draw\"\r\n      } else {\r\n        status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\r\n      }\r\n  \r\n      return (\r\n        <div className=\"game\">\r\n          <div className=\"game-board\">\r\n            <Board\r\n              winnerSquares={winnerLine}\r\n              squares={current.squares}\r\n              onClick={(location) => this.handleClick(location)}\r\n            />\r\n          </div>\r\n          <div className=\"game-info\">\r\n              <div>{status}</div>\r\n              <button className=\"\" onClick={() => this.sortMoves()}>\r\n                Sort moves\r\n              </button>\r\n              \r\n            <ol>{moves}</ol>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\nexport default Game;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Game from \"./components/Game\"\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n"],"sourceRoot":""}